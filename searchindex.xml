<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Kubernetes入门</title><url>https://lizj3624.github.io/post/kubernetes-primer/</url><categories><category>kubernetes</category></categories><tags><tag>kubernetes</tag><tag>k8s</tag><tag>cloudnative</tag></tags><content type="html"> 以容器(docker)和容器编排(kubernetes)的云原生技术栈在后端开发中越来越重要，每个技术童鞋都有必要熟悉这个技术栈
kubernetes入门 kubernetes的核心组件 API Server API server 的核心功能是提供k8s各类资源对象(如Pod、RC、Service)的增删改查及Watch等HTTP REST接口，成为集群内各个功能模块之间数据交互和通信的中心枢纽，是整个集群的数据总线和数据中心，运行在master节点。 通常还具有以下功能。
集群管理的API入口 资源配额控制的入口 提供了完备的集群安全机制。 通常我们会通过kubectl命令与API server进行交互，提供restful API，所以说也可以通过代码方式直接调用k8s的API server。
控制器管理器(controller-manager) controller-manager作为集群内部的管理控制中心，负责集群内部的Node、Pod、Endpoint、Namespace、ServiceAccount、ResourceQuota等的管理，意为控制器，运行在master节点。
ReplicaSet Controller(副本控制器): 管理控制 pod 副本（服务集群）的数量，以使其永远与预期设定的数量保持一致。 Endpoint Controller(节点控制器): Endpoint用来表示kubernetes集群中Service对应的后端Pod副本的访问地址，Endpoint Controller则是用来生成和维护Endpoints对象的控制器，其主要负责监听Service和对应Pod副本变化。 Deployment Controller(部署控制器): Deployment中文意思为部署、调度，通过Deployment我们能操作RS（ReplicaSet） StatefulSet Controller(状态控制器): StatefulSet的出现是K8S为了解决 “有状态” 应用落地而产生的，Stateful这个单词本身就是“有状态”的意思 DaemonSet Controller(收回控制器): Daemon本身就是守护进程的意思，那么很显然DaemonSet就是K8S里实现守护进程机制的控制器 Job Controller(任务控制器): 在K8S里运行批处理任务我们用Job即可 CronJob Controller(cronjob控制器): 定时任务 调度器(scheduler) kube-scheduler意为调度器，在集群承担了"承上启下"的重要功能，“承上”指的是它负责接收 Controller -manager创建的新Pod。为其安排一个可以安置的node;“启下”指的是安置完成之后，目前Node上的kubelet服务进程接管后继续工作，负责Pod生命周期中的下半生。
kubelet 一个在集群中每个节点(node)上运行的代理。 它保证容器(containers)都 运行在 Pod 中。 kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。
kube-proxy kube-proxy 是集群中每个节点上运行的网络代理， 实现 Kubernetes 服务(Service) 概念的一部分。
etcd 存储数据
kubernetes的请求流程 Pod Pod可以理解为是一组功能相同的容器，装的是docker创建的容器，也就是用来封装容器的一个容器； Pod 是一个虚拟化分组，有自己的IP地址和主机名hostname，利用namespace 进行资源隔离，相当于一台独立沙箱环境； Pod 相当于一台独立主机，内部可以封装一个或多个容器(通常是一组相关的容器)，内部容器之间访问采用 localhost。 Pod可以理解为豌豆荚
Service Kubernetes Service定义了逻辑上的一组Pod的抽象，可以通过一定策略访问这个Service, 我们一般称为微服务。 Service所针对的Pods集合通常是通过选择算符(标签选择器)来确定的， Pod经常被创建和销毁，IP地址不固定，Service定义一组逻辑上的一组Pod的抽象，通过kube-proxy自动分配一个集群内部可以访问的虚IP，称为cluster IP。
在 Kubernetes 中，可以通过 Cluster Ip 来找到 Pod 的访问规则，但是 Cluster Ip 不好记啊，所以 Kuberbetes 提供了一个 CoreDns 的组件来对 Service 进行解析。 CoreDns 是一个DNS服务器，每当有Service创建时，都会在DNS服务里面增加一条记录。集群中的Pod可以通过&lt;SERVICE_NAME>.&lt;NAMESPACE_NAME>访问Service
dig codereviewapi Server: 10.96.0.10 Address: 10.96.0.10:53 Name: codereviewapi.codereview.svc.cluster.local Address: 10.111.72.52 Kubernetes Service对外暴露服务通过NodePort、LoadBalancer和ExternalName
NodePort：建立在ClusterIP类型之上，其在每个Node的IP地址的某静态端口（NodePort）暴露服务，NodePort的路由目标为ClusterIP，简单来说，NodePort类型就是在工作节点的IP地址上选择一个端口用于将集群外部的用户请求转发至目标Service的ClusterIP和Port，这种类型的Service既可如ClusterIP一样受到集群内部客户端Pod的访问，也会受到集群外部客户端通过套接字NodeIP:NodePort进行的请求；
LoadBalancer：建构在NodePort类型之上，其通过cloud provider提供的负载均衡器将服务暴露到集群外部，LoadBalancer类型的Service会指向关联至Kubernetes集群外部的某个负载均衡设备，该设备通过工作节点之上的NodePort向集群内部发送请求流量，这种Service的优势在于，能够把来自于集群外部客户端的请求调度至所有节点（或部分节点）的NodePort之上，而不是依赖于客户端自行决定连接至哪个节点，从而避免了因客户端指定的节点故障而导致的服务不可用；
ExternalName：通过将Service映射至由externalName字段的内容指定的主机名来暴露服务，此主机名需要被DNS服务解析至CNAME类型的记录。这种类型并非定义由Kubernetes集群提供的服务，而是把集群外部的某服务以DNS CNAME记录的方式映射到集群内，从而让集群内的Pod资源能够访问外部的Service的一种实现方式，这种类型的Service没有ClusterIP和NodePort，也没有标签选择器用于选择Pod资源。
Ingress Service对集群之外暴露服务的主要方式有两种：NodePort和LoadBalancer，但是这两种方式，都有一定的缺点：
NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显。
LoadBalancer的缺点是每个Service都需要一个LB，浪费，麻烦，并且需要kubernetes之外的设备的支持。
Ingress相当于一个七层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解为Ingress里面建立了诸多映射规则，Ingress Controller通过监听这些配置规则并转化为Nginx的反向代理配置，然后对外提供服务。</content></entry><entry><title>Docker常用的命令</title><url>https://lizj3624.github.io/post/docker-cmd/</url><categories><category>docker</category></categories><tags><tag>docker</tag></tags><content type="html"> 一、汇总： Docker环境信息 — docker [info|version] 容器生命周期管理 — docker [create|exec|run|start|stop|restart|kill|rm|pause|unpause] 容器操作运维 — docker [ps|inspect|top|attach|wait|export|port|rename|stat] 容器rootfs命令 — docker [commit|cp|diff] 镜像仓库 — docker [login|pull|push|search] 本地镜像管理 — docker [build|images|rmi|tag|save|import|load] 容器资源管理 — docker [volume|network] 系统日志信息 — docker [events|history|logs] 常用命令的含义：
1、docker命令介绍 docker --help 管理命令: container 管理容器 image 管理镜像 network 管理网络
命令： attach 介入到一个正在运行的容器 build 根据Dockerfile构建一个镜像 commit 根据容器的更改创建一个新的镜像 cp 在本地文件系统与容器中复制 文件/文件夹 create 创建一个新容器 exec 在容器中执行一条命令 images 列出镜像 kill 杀死一个或多个正在运行的容器
logs 取得容器的日志 pause 暂停一个或多个容器的所有进程 ps 列出所有容器 pull 拉取一个镜像或仓库到registry push 推送一个镜像或仓库到registry rename 重命名一个容器 restart 重新启动一个或多个容器 rm 删除一个或多个容器 rmi 删除一个或多个镜像 run 在一个新的容器中执行一条命令 search 在Docker Hub中搜索镜像 start 启动一个或多个已经停止运行的容器 stats 显示一个容器的实时资源占用 stop 停止一个或多个正在运行的容器 tag 为镜像创建一个新的标签 top 显示一个容器内的所有进程 unpause 恢复一个或多个容器内所有被暂停的进程
docker info #查看系统(docker)层面信息，包括管理的images, containers数等 docker version #查看docker的版本号，包括客户端、服务端、依赖的Go等 二、镜像相关 1、拉取镜像 # docker pull &lt;image> 从docker registry server 中下拉image docker pull nginx 2、查看镜像 docker images ##过滤掉中间镜像（现有镜像的父镜像） docker images -a ##列出所有的images 3、推送镜像 docker push &lt;image|repository> #推送一个image或repository到registry docker push &lt;image|repository>:TAG #同上，指定tag 4、删除镜像 docker rmi 常用参数：
-f：强制删除运行中的容器
5、创建镜像 （1）对源镜像更改后重新建立新镜像
docker commit &lt;container> [repo:tag] ##将一个container固化为一个新的image，后面的repo:tag可选 常用参数：
-m：本次提交信息
--author="" ：作者
（2）使用Dockerfile文件来构建镜像
docker build 常用参数：
-t x/y:z：指定镜像的命名空间为x，仓库为y，tag为z 6、搜索镜像 docker search nginx 7、登录远端镜像仓库 docker login --username=yourhubusername --email=youremail@company.com 8、查看镜像底层信息 docker inspect &lt;image|container> ##查看image或container的底层信息 9、镜像导入和导出 ##快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也更大。 docker save ##保存的是镜像（image），docker export 保存的是容器（container）； docker load ##用来载入镜像包，docker import 用来载入容器包，但两者都会恢复为镜像； docker load ##不能对载入的镜像重命名，而 docker import 可以为镜像指定新名称，如： docker import ubuntu.tar merge_gt/ubuntu:v1(新名称)。 三、容器相关 1、运行容器 docker run 常用参数：
--name:为容器指定名称
-it:启动一个交互型容器，此参数为我们和容器提供了一个交互shell
-d:创建后台型容器
-restart=always:容器退出后自动重启
-restart=on-failure:x:容器退出时如果返回值是非0，就会尝试重启x次
-p x:y :主机端口：容器端口
-P：随机分配一个49000到49900的端口
-v：创建数据卷
-n :指定dns
-h : 指定容器的hostname
-e ：设置环境变量
-m :设置容器使用内存最大值
--net: 指定容器的网络连接类型，支持bridge/host/none/container
--link=x: 添加链接到另一个容器x
--expose=x: 开放端口x
这里docker create和docker run -it创建的容器都是交互型容器
2、查看正在运行的容器 docker ps 常用参数： -a：查看所有容器 -l:只列出最近创建的 -n=x:只列出最后创建的x个 -q: 只列出容器id
3、停止容器 docker stop ##方式较温柔，慢慢的停止容器的运行 docker kill ##方式简单粗暴，立即停止容器运行 docker start/stop/restart &lt;container> ##开启/停止/重启container docker start -i &lt;container> ##启动一个container并进入交互模式 4、删除容器 docker rm &lt;container...> ##删除一个或多个container docker rm `docker ps -a -q` ##删除所有的container docker ps -a -q | xargs docker rm ##同上, 删除所有的container 常用参数： -f：强制删除运行中的容器
5、查看容器日志 docker logs &lt;container> ###查看container的日志，也就是执行命令的一些输出 常用参数： -f：实时查看日志 --tail=x:查看最后x行 -t:查看日志产生的时间
6、查看容器进程 docker top 7、查看容器配置信息 docker inspect 常用参数：
-f='{{x}}'：查看x配置 8、进入容器 （1）进入交互型容器
docker attch （2）进入后台型容器
docker exec 常用参数： -it 容器id /bin/bash：进入到后台容器
9、使用docker cp将文件从本地复制到容器 docker cp index.html hardcore_torvalds:usr/share/nginx/html/ 四、dockerfile 1、docker build docker build &lt;path> ##寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image docker build -t repo[:tag] ##同上，可以指定repo和可选的tag docker build - &lt; &lt;dockerfile> ###使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image 2、常用命令 FROM命令: 既然我们是在原有的centos镜像的基础上做定制，那么我们的新镜像也一定是需要以centos这个镜像为基础的，而FROM命令则代表了这个意思，在DockerFile中，基础镜像是必须指定的，FROM指令的作用就是指定基础镜像，因此一个DockerFile中,FROM是必备的指令，而且就像java，python的import关键字一样，在DockerFile中，FROM指令必须放在第一条指令的位置
当然，这个时候可能有朋友会问了，我要是不想在其他的镜像上定制镜像怎么办呢，没问题啊，Docker 提供了scratch 这个虚拟镜像，如果你选择 FROM scratch 的话，则意味着你不以任何镜像为基础，接下来所写的指令将作为镜像的第一层开始存在，当然，在某些情况下，比如linux下静态编译的程序，运行的时候不需要操作系统提供运行时的支持，这个时候FROM scratch 是没有问题的，反而会大幅降低我们的镜像体积。
ENV指令 功能：设置环境变量
同样的，DockerFile也提供了两种格式：
ENV key value ENV key1=value1 key2=value2 这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN， 还是运行时的应用，都可以直接使用这里定义的环境变量。
可以看到我们示例中使用ENV设置mypath变量之后，在下一行WORKDIR则使用到了mypath这个变量
ENV mypath /tmp ##设置环境变量 WORKDIR $mypath ###指定工作目录 WORKDIR 指令： 功能，指定工作目录
格式为：WORKDIR 工作目录路径，如果这个目录不存在的话，WORKDIR则会帮助我们创建这个目录。
设置过工作目录之后，当我们启动容器，会直接进入该工作目录
[root@8081304919c9 tmp]# RUN命令: RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令也是在定制镜像时是较为常用的指令之一。
RUN命令的格式一共有两种，分别是:
Shell格式
RUN``命令，就像直接在命令行中输入命令一样，比如RUN yum -y install vim`就是使用的这种格式
exec格式
RUN[&ldquo;可执行文件&rdquo;,&ldquo;参数1&rdquo;,&ldquo;参数2&rdquo;]，感觉就像调用函数一样
就像我们在上一篇文章中说过的那样，DockerFile中每一条指令都会建立一层，比如我们上面执行过下面这条命令
RUN yum -y install vim 执行结束之后，则调用commit提交这一层的修改，使之构成一个新的镜像，怎么样，是不是豁然开朗了呢。
同样的，Dockerfile支持Shell类的行尾添加 \的命令换行方式，以 及行首#进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。
提示：
如果使用apt方式安装的话，最后不要忘记清理掉额外产生的apt缓存文件，如果不清理的话会让我们的镜像显得非常臃肿。因为DockerFile生成一层新的镜像的时候，并不会删除上一层镜像所残留的文件。
EXPOSE指令： 功能：声明端口
格式： EXPOSE 端口1 端口2
EXPOSE 指令是声明运行时容器提供服务端口，这当然只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。这样声明主要是为了方便后期我们配置端口映射。
CMD指令： 之前介绍容器的时候曾经说过，Docker不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD指令就是用于指定默认的容器主进程的启动命令的。
同样的，DockerFile也为我们提供了两种格式来使用CMD命令:
shell格式：CMD命令 exec 格式：CMD ["可执行文件", "参数 1", "参数 2"...] 示例中，我们使用的是第一种：
CMD /bin/bash 这条指令带来的效果就是，当我们通过run -it 启动命令的时候，容器会自动执行/bin/bash，centos默认也是CMD /bin/bash，所以当我们运行centos镜像的时候，会自动进入bash环境里面。
当然，我们也可以通过运行时指定命令的方式来体换默认的命令，比如:
docker run -it centos cat /etc/os-release 这样当我们运行镜像的时候，cat /etc/os-release就会替代默认的CMD /bin/bash输出系统的版本信息了。
如果使用shell格式的话， 实际的命令会被包装为sh -c的参数的形式进行执行。
比如：
CMD echo $HOME 在实际执行中，会将其变更为
CMD [ "sh", "-c", "echo $HOME" ] 当然还有很多初学者特别容易犯的问题，就是去启动后台服务，比如:
CMD service nginx start 这样子去用，会发现容器运行了一会就自动退出了。
我们之前不止一次的提醒过，容器不是虚拟机，容器就是进程，容器内的应用都应该以前台运行，而不是像虚拟机，物理机那样去运行后台服务，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。
怎么理解呢？想想偶像剧，容器是女主角，主进程是男主角
你走了，我也不活了（撕心裂肺大哭），大概就是这么个意思。
正如我们前面所提出的，实际上CMD service nginx start最终会被理解为：
CMD [ "sh", "-c", "service nginx start"] 在这里，我们主进程实际就是sh，当我们service nginx start执行完毕之后，那么sh自然就会退出了，主进程退出，容器自然就会相应的停止。争取的做法是直接执行nginx可执行文件，并且声明以前台的形式运行:
CMD ["nginx", "-g", "daemon off;"] 到这里，我们示例中所涉及到的命令已经讲完了，当然，这并不够，Docker中仍然有很多命令是我们使用比较频繁的，下面我们的部分作为补充，讲一下其他常用的DockerFile命令。
COPY 命令: 功能:复制文件
Docker依旧提供了两种格式供我们选择:
COPY [&ndash;chown=:] &lt;源路径>&hellip; &lt;目标路径> COPY [&ndash;chown=:] ["&lt;源路径 1>",&hellip; &ldquo;&lt;目标路径>"] 到这里大家其实会发现，Docker提供的两种格式其实都是差不多的用法，一种类似于命令行，一种则类似于函数调用。
第一种例如(将package.json拷贝到/usr/src/app/目录下):
COPY package.json /usr/src/app/ 其次，目标路径 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径 ，工作目录可以用 WORKDIR 指令来指定，如果需要改变文件所属的用户或者用户组，可以加上&ndash;chown 选项。
需要注意的是，使用 COPY 指 令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这 个特性对于镜像定制很有用。
ADD命令： ADD命令可以理解为COPY命令的高级版，格式和用法与COPY几乎一致，ADD在COPY的基础上增加了一些功能，比如源路径可以是一个URL链接，当你这么用的时候，Docker会尝试着先将该URL代表的文件下载下来，然后复制到目标目录上去，其他的则是在COPY的基础上增加了解压缩之类的操作，码字码的手疼，需要了解的朋友可以去官网查看相关的文档，这里我就不延申了。
VOLUME 定义匿名卷: 在上一篇中，我们有讲容器卷这个概念，为了防止运行时用户忘记 将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些 目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运 行，不会向容器存储层写入大量数据。
例如:
VOLUME /data 复制代码 运行时通过-v参数即可以覆盖默认的匿名卷设置。
USER 命令: 功能:指定当前用户
格式:USER 用户名:用户组
USER指令和WORKDIR相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER则是改变之后层的执行RUN, CMD以及ENTRYPOINT这类命令的身份。当然，和WORKDIR一样，USER只是帮助你切换到指定用户。
当然这个大前提是，你的User用户是事先存在好的。
3、dockerfile用例 FROM centos ##继承至centos ENV mypath /tmp ##设置环境变量 WORKDIR $mypath ##指定工作目录 RUN yum -y install vim ##执行yum命令安装vim RUN yum -y install net-tools ###执行yum命令安装net-tools EXPOSE 80 ###对外默认暴露的端口是80 CMD /bin/bash ###CMD 容器启动命令，在运行容器的时候会自动执行这行命令，比如当我们 docker run -it centos 的时候，就会直接进入bash ##然后编译该镜像 docker build -f ./DockerFile -t mycentos:1.3. -t ##新镜像名字:版本 -f ###文件 -d 文件夹 引用 dockerfile的最佳实践
docker命令</content></entry><entry><title>Docker入门与实践</title><url>https://lizj3624.github.io/post/docker-primer/</url><categories><category>docker</category></categories><tags><tag>docker</tag></tags><content type="html"> 基础入门 docker命令大全速查 docker命令大全速查
docker核心概念 容器: Container 镜像: Image 仓库: Repository 使用docker镜像 获取镜像 # docker [image] pull NAME:[TAG] # NAME是镜像的名字，TAG是标签 docker pull ubuntu:18.04 docker pull registry.hub.docker.com/ubuntu:18.04 查看镜像信息 docker image docker tag ubuntu:latest myybuntu:latest docker inspect ubuntu:18.04 docker history ubuntu:18.04 查找 docker search --filter=stars=4 nginx 删除 docker rmi myubuntu:latest 创建容器 docker commit -m "add new file" -a "Docker Newbee" a925cb40b3f0 test:0.1 cat ubuntu-18.04-x86_64-minimal.tar.gz |docker import - ubuntu:18.04 # docker file 存出和载入镜像 docker load -i ubuntu_18.04.tar docker load &lt; ubuntu_18.04.tar docker tag test:latest user/test:latest docker push user/test:latest 操作容器 ## 创建容器 docker create -it ubuntu:latest ## 启动已经创建的容器 docker start af ## 创建并启动容器 docker run ubuntu /bin/echo 'Hello workd' -d 守护 ## 停止 docker pause [contains] docker stop ce5 docker restart ce5 ## 进入容器 docker attach docker exec -it 243c32535da7 /bin/bash ## 删除 docker rm ce554267d7a4 docker数据管理 数据卷将主机操作系统的目录直接映射到容器，类型Linux的mount行为
docker volume create -d local test # -mount 选项支持三种类型的数据卷，包括 : # volume : 普通数据卷，映射到主机/ var/lib/docker/volumes 路径下; # bind:绑定数据卷，映射到主机指定路径下; # tmpfs :临时数据卷，只存在于内存中 。 docker run d P -name web mount type=bind,source=/webapp,destination=/opt/ webapp training/webapp python app.py docker run -d -P --name web -v /webapp:/opt/webapp training/webapp python app.py # 只读 ro docker run -d -P --name web -v /webapp: /opt/webapp:ro training/webapp python app.py # 数据卷容器 docker run -it -v /dbdata --name dbdata ubuntu docker run -it --volumes-from dbdata -name db1 ubuntu # 数据卷容器备份和恢复 docker run -volumes-from dbdata -v $ (pwd) :/backup - -name worker ubuntu tar cvf /backup/backup.tar /dbdata docker run -v /dbdata --name dbdata2 ubuntu /bin/bash 端口映射与容器互联 当容器中运行一些网络应用， 要让外部访问这些应用时， 可以通过-P或-p参数来指 定端口映射。当使用平(大写的)标记时， Docker会随机映射一个49000~49900的端口 到内部容器开放的网络端口:
# 本地主机的49155被映射到了容器的5000端口 docker run -d -P training/webapp python app.py # -p (小写的)则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。 支持的格式有 IP:HostPort:ContainerPort | IP::ContainerPort | HostPort:ContainerPort。 docker run -d -p 5000:5000 training/webapp python app.py docker run -d -p 5000:5000 -p 3000:80 training/webapp py thon app.py docker run -d -p 127.0.0.1::5000 training/webapp python app.py docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py # 查看端口映射 docker port nostalgic_morse 5000 docker run -d -P --name web --link db:db 扛aining/webapp py七hon app.py Dockerfile创建镜像 docker file 进阶 核心技术 基础架构 服务端 dockerd：为客户端提供RESTful API，响应来自客户端的请求，采用模块化的架构，通过专门的Engine模块来分发管理各个来自客户端的任务。 docker-proxy：是dockerd的子进程，当需要进行容器端口映射时，docker-proxy完成网络映射配置 containerd：是dockerd的子进程，提供gRPC接口响应来自dockerd的请求，对下管理runC镜像和容器环境。 containerd-shim：是containerd的子进程，为runC容器提供支持，同时作为容器内进程的根进程 runC是从docker公司开源的libcontainer项目演化而来的，目前加入OCI(Open Containers Initiative)，支持容器相关的技术栈，同时正在实现跨OS
客户端 docker命令就是客户端
镜像仓库 docker hub
命名空间 命名空间(namespace)是Linux内核的一个强大特性，为容器虚拟化的实现提供极大便利，每个容器都可以拥有自己单独的命名空间。 实现了内存、CPU、网络IO、硬盘IO、存储空间，还有文件系统、网络、PID、UID、IPC等相互隔离
进程命名空间 IPC命名空间 网络命名空间 挂载命名空间 UTS命名空间 用户命名空间 控制组 控制组(CGroups)是Linux内核的一个特性
资源限制 优先级 资源审计 隔离 控制 联合文件系统 联合文件系统(UnionFS)是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息作为一次提交，并层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，应用看到的挂载的最终结果。是docker镜像的技术基础
Linux网络虚拟化 docker中网络接口默认是虚拟接口.docker服务启动时首先在主机上自动创建一个docker0虚拟网桥，实际上是一个Linux网桥。网桥可以理解为一个软件交换机，负责挂载其上的接口之间进行包转发。同时，Docker随机分配一个本地未占用的私有网段中的一个地址给docker0接口，比如172.17.0.0、16，掩码为255.255.0.0.，此后启动的容器的网口也会自动分配一个该网段的地址。当创建一个Docker容器的时候，同时会创建了一对veth pair互联接口。当向任一个接口发送包时，另外一个接口自动收到相同的包。互联接口的一端位于容器内，即eth0；另一端在本地并被挂载到docker0网桥，名称以veth开头。通过这种方式，主机可以与容器通信，容器之间也可以相互通信。如此一来，Docker就创建了在主机和所有容器之间一个虚拟共享网络。</content></entry><entry><title>Hugo新增评论插件</title><url>https://lizj3624.github.io/post/hugo-comment/</url><categories><category>hugo</category></categories><tags><tag>hugo-plug-in</tag></tags><content type="html"> 缘起 我通过github用hugo的hugo-theme-next模板搭建博客，但是发现评论不可用， 每次提交评论时都提示Window.fetch: https://Your WalineSerURL/comment?lang=zh-cn is not a valid UR的错误，经过一顿google查询， 发现Hugo本身不支持评论，需要通过插件支持，我用的是hugo-theme-next的主题模板，评论插件是waline
waline评论插件 waline快速上手</content></entry><entry><title>美股科技巨头2021Q4财报</title><url>https://lizj3624.github.io/post/faamg/</url><categories/><tags><tag>美股</tag><tag>财报</tag><tag>FAAMG</tag></tags><content type="html"> 2022年2月美股科技巨头(FAAMG)相继发Q4财报，财报总结如下
云计算三巨头 本季度亚马逊云(AWS)Q4营收177.8亿美金，同比增速40%，微软云(Azure)Q4营收81.97亿美金，同比增速46%，谷歌云(GCP)Q4营收55.41亿美金，同比增速45%，均略超市场预期。三家云计算厂商预计占据市场超过75%的市场份额。
图1：AWS、Google Cloud、微软Azure季度增速对比 图2：2021年三家头部云计算厂商占据全球市场75%的市场份额 FAAMG财报 苹果：收入利润均超预期，硬件需求强劲，软件收入持续快速上升。2022财年第一季度苹果公司实现营收1239亿美元，同比增长11.3%，超彭博一致预期（1191亿美元），主要来源于2021年下半年新品发布的iPhone和Mac业务。同时软件用户端量价齐升，超越市场预期。毛利率逆势上升至43.8%。下季度指引：在供应限制的挑战下，产品收入有望实现稳健的同比增长。服务预计将实现强劲的两位数增长。毛利率预计在42.5%-43.5%之间，运营支出预计为125亿-127亿美元。
微软：数字化需求强劲，公司预计下季度Azure同比增速将上升，个人PC正在结构性复兴。本季度营收517亿美元，同比增长20%，经营利润222亿美元，同比增长24%，均略超市场预期。本季度Azure收入增速46%。下季度指引：智能云业务预计营收在187.5亿到190亿美元，生产力与业务处理预计营收156亿到158.5亿美元，个人计算预计营收141.5亿到144.5亿美元。
谷歌：净利润大超预期，广告需求强劲且竞争力改善。总营收753亿美元，同比增速32%，略超市场预期。经营利润219亿，同比增长40%。三季度EPS30.69美元，大超市场预期。谷歌广告除了相对受益苹果隐私新政之外，旅游业的强劲复苏也有望带动旅游广告投放量的增加。但YouTube、谷歌云未来的调整和增长点值得关注。
亚马逊：云计算超预期，电商供应链与资本开支压力或在下季度得到一定缓解，Prime提价。公司2月3日发布四季度财报，营收略低于预期。AWS本季营收增速提升到40%。下季度指引，收入预计1120-1170亿美元，预计同比增长3%-8%。营业利润预计30-60亿美元，去年同期为89亿美元。
特斯拉：交付能力与盈利能力均略超市场预期，22年主要关注FSD能力与机器人研发。公司本季度生产交付、盈利能力仍在快速提升，总收入同比增长65%，达到177亿美元；营业利润率达到14.7%，在所有批量OEM中实现了最高的季度营业利润率；其中汽车收入同比增长71%，达到160亿美元。全年汽车收入472亿美元，同比增长73%，营业利润率12%；全年GAAP净利润55亿美元，盈利能力快速提升。从汽车生产销售来看，全年汽车总产量超93.04万台，同比增长83%，汽车交付量超93.62万台，同比增长87%。汽车收入毛利率增加3.7个百分点，达到29.3%，其背后主要驱动力在于降低成本、利用上海工厂出口销售和刺激需求。
Meta：App用户增长停滞，且苹果Att政策影响短期盈利能力，主动应变，以短视频Reels、布局元宇宙生态应对Tiktok短视频崛起的全球竞争。季度收入同比增20%达336.7亿美元，略高于彭博一致预期，圣诞季Quest2销售贡献。利润不及预期，主要原因在于苹果隐私新政、监管影响、宏观经济影响（成本上升、供应链问题），用户时长主动部分迁移至商业化程度较低的Reels，以及美元升值带来的外汇影响。经营利润126亿美元，同比下滑1.5%，经营利润率37.4%。Meta面临和Tiktok的竞争与获取年轻用户的问题，短视频是发力的主战场之一，元宇宙生态则是下一代社交的真正决胜。公司2022年1季度的收入指引在270-290亿美元区间，同比增长3%-11%。</content></entry><entry><title>50种认知偏差</title><url>https://lizj3624.github.io/post/50-cognitive-biases/</url><categories/><tags><tag>认知偏差</tag></tags><content type="html"> 前段时间埃隆.马斯克在社交网站发布50种认知偏差，建议年轻人都应该了解这些偏差，可以少走一些弯路。 国人翻译成中文，再次记录一下，有空多看看这些认知偏差
什么是“认知偏差”？ 认知偏差是人们在知觉自身、他人或外部环境时，常因自身或情境的原因使得知觉结果出现失真的现象。 典型表现有显著性偏差、生动性偏差等。 社会知觉中常见的刻板印象、晕轮效应等均为某种形式的知觉偏差。是个人知觉具有选择性的特征所致。
“认知偏差”一般可以使用认知行为疗法（CBT）进行调整。 CBT是通过改变你不合理的思维模式与行为模式，来减少你产生失调的情绪和行为，从而达到改善你心理问题的疗法。
50种认知偏差-中文版 1. 基本归因错误 Fundamental Attribution Error
我们经常根据个性或者性格来定义别人，但会用情境因素帮自己开脱。
例如：Sally上课迟到，肯定是她懒，你自己迟到，就是早上太忙乱。
2. 自私的偏见 Self-Serving Bias
失败总是有原因的，⽽成功全是靠⾃⼰。
例如：觉得得奖是因为自己工作努力，而不是靠别人帮助和运气。但考试不及格，只是因为睡眠不足而已。
3. 组内偏爱 In-Group Favoritism
我们偏爱同一个圈子的圈内人，而不是圈外人。
例如：Francis跟你一个教堂，所以你喜欢他多过Sally。
4. 从众效应 Bandwagon Effect
随着越来越多的人接受某些理念、时尚和信仰，这些理念的影响也会随之壮大。
例如：Sally觉得指尖陀螺对孩子挺好的，Francis也这么觉得。
5. 群体思维 Groupthink
希望团队保持一致与和谐，我们有时会为了减少冲突去做一些不合理的决定。
例如：Sally想买冰激凌，Francis想买T恤，所以你建议买印冰激凌图案的T恤。
6. 光环效应 Halo Effect
如果你认为一个人具有某种积极的特质，那么这种积极的印象会溢出到他的其他特质中。反之亦然。
例如：Taylor这么可爱，他肯定一点也不刻薄。
7. 道德运气 Moral Luck
由于一个好的结果，会提高人们对其道德地位的评价，反之亦然。
例如：xx赢得了xx之争，那他们比输掉的人更有德行。
8. 错误共识 False Consensus
现实中支持我们观点的人要比我们想象中的少。
例如：所有人都是这么想的！
9. 知识的诅咒 Curse of Knowledge
一旦我们知道了某件事，我们就会假设其他人也同样知道这件事。
例如：Alice是一名教师，她很难理解新同学们看事情的⻆度。
10. 聚光灯效应 Spotlight Effect
我们会高估他人对自己外表及行为举止的关注程度。
例如：Sally很担心大家会注意到她的冰激凌T恤有多丑。
11. 可用性启发法 Availability Heuristic
我们在做判断时，通常都依赖于当下脑海中出现的最直观例子。
例如：选择品牌时，你通常会选择最近看到过广告的那家。
12. 防御性归因 Defensive Attribution
一件事故中，如果目击者与受害者经历相似，他们就会更少的责怪受害者，转而去攻击加害者。反之亦然。
例如：Sally开车等绿灯时在车里玩手机被追尾。目击者Greg也会开车玩手机。所以他对撞了Sally的人大吼大叫。
13. 公正世界假说 Just-World Hypothesis
我们倾向于相信世界是公正的。因此，我们会认为不公正的事是有原因的。
例如：Sally的钱包被偷了，看，她总因为T恤的事批评Francis，遭报应了吧。
14. 朴素现实主义 Naive Realism
我们相信自己观察到的就是客观现实；而其他人则是不理性，不知情或者有偏见的。
例如：我看到了这个世界的真相，其他人都很蠢。
15. 幼稚的愤世嫉俗 Naive Cynicism
相信自己观察到的是客观事实，而其他人以自我为中心的偏见比他们实际表现出来的更多。
例如：这人对我好的原因，肯定是想从我这⾥得到点什么。
16. 弗拉效应（又名巴纳姆效应） Forer Effect (aka Barnum Effect)
我们很容易将我们的个性归结为模糊的陈述，即使它们适用于更为广泛的人。
例如：这个星座指南真的是太准了！
17. 邓宁-克鲁格效应 Dunning-Kruger Effect
你知道的越少就越自信。知道的越多就越不自信。
例如：Francis自信地向大家保证，冰淇淋里绝对没有海带，海带也没有被用于乳制品行业。
18. 锚定效应 Anchoring
我们在做决定时非常依赖第一眼看到的信息。
例如：这东西现在是原价的50%，那肯定老便宜了。
19. 自动化系统偏差 Automation Bias
我们依赖自动化系统，有时甚至过于相信，导致真正正确的决策被放弃。
例如：手机的自动纠错功能把 “its” 替换成了 “it’s”，于是你假定“it’s”就是正确的。
20. 谷歌效应（又名数码健忘症） Google Effect (aka Digital Amnesia)
我们经常会忘记在搜索引擎中很容易找到的信息。
例如：那个电影的演员叫啥来着？我都查了8次了。
21. 阻抗理论 Reactance
当⾃由受到限制时，我们会产生不快，所以会做出一些反抗的行为来释放情绪。
例如：家长越让孩子去做作业，孩子越是不愿意做。
22. 确认偏差 Confirmation Bias
我们倾向于找到并记住能证实我们看法的信息。
例如：用不完整的证据得出一个阴谋论，却忽略那些相反的论据。
23. 逆火效应 Backfire Effect
人的一个错误的认知被新信息推翻时，新信息与人原本的看法不符，反而会加深人对原本错误认知的信任。
例如：相信阴谋论的人会认为，新出现的证据都是伪造用来掩盖阴谋论的。
24. 第三人称效应 Third-Person Effect
我们会认为媒体对他人的影响比对我们自己更大。
例如：你显然是被媒体洗脑了。
25. 信念偏差 Belief Bias
我们判断一个论点的⼒量，不是根据它支持结论的力度，而是根据我们自己认为结论的可信度。
例如：Sally说她也支持你那个阴谋论，但她没有说出什么证据来。
26. 可获性层叠 Availability Cascade
因为我们对融入社会的需要，越被公开和重复讨论的事情，我们越会相信其真实性。
例如：糖果里藏了剃须刀片的故事广为流传，最终许多美国人不再在万圣节时提供自制糖果。
27. 衰落主义 Declinism
我们倾向于将过去浪漫化，并消极地看待未来，认为社会/机构总体上正在衰退。
例如：在我们的孩童时代，孩子更懂得尊重！
28. 现状偏见 Status Quo Bias
我们倾向于保持不变，即使是有利的变化也被认为是一种损失
例如：即使某APP侵犯了Sally的隐私，她也不愿意换另一个这方面做得更好的试试。
29. 沉没成本谬误（又名承诺升级） Sunk Cost Fallacy (aka Escalation of Commitment)
即使面临失败的结果，人们会因为前期的投入，会在这个注定失败的事情上继续投入。
例如：“投入1分钱，就会再投1块钱！”（一不做，二不休）
30. 赌徒谬误 Gambler&rsquo;s Fallacy
认为某个事件未来的可能性会受到过去事件的影响。
例如：猜硬币已经输了9次了，下次应该能猜中。
31. 零风险偏差 Zero-Risk Bias
我们更愿意将小风险降低到零，即使我们可以通过另一种选择来降低整体风险。
例如：“你应该买个保险服务”
32. 框架效应 Framing Effect
人们对一个客观上相同问题的不同描述导致了不同的决策判断。
例如：候选人获得45%的支持率将大获全胜；候选人获得45%的支持率让全国失望；
33. 刻板印象 Stereotyping
人们普遍认为，尽管没有关于个人的信息，但一个群体的成员将具有某些相同的特征。
例如：那个留着精致小胡子的人肯定是个嬉皮士，估计还收集了一些黑胶唱片。
34. 外群体同质性偏差 Outgroup Homogeneity Bias
人们认为圈外人千篇一律，而自己圈子里的人各个不同。
例如：Alice不打游戏，她认为玩游戏的人都一样。
35. 权威偏见 Authority Bias
我们信任权威人物的意见，并经常受其影响。
例如：专家说这个可以这么做。
36. 安慰剂效应 Placebo Effect
如果我们相信某种治疗会奏效，它通常会产生很小的生理效应。
例如：Alice服用了安慰剂来止痛，结果疼痛真的减轻了。
37. 幸存者偏差 Survivorship Bias
我们看到的往往是幸存者的故事，因为未幸存者已无法发声。而我们很容易把看到的当作全部。
例如：看到返航的战斗机机翼弹孔最多，得出战斗机机翼是被击中最多的部位。是事实被击中发动机的飞机已经回不来了。
38. 精神活动过速 Tachypsychia
我们对时间的看法取决于创伤、吸毒和体力消耗。
例如：当差点被汽车撞到的时候，时间都慢下来了。
39. 琐碎法则（又名自行车棚效应） Law of Triviality (aka &ldquo;Bike-Shedding&rdquo;)
人们会对琐碎的问题给予不成比例的重视，同时又避免面对复杂的问题。
例如：一个地方市政府花费了大量的时间去讨论自行车道和自行车棚的问题，而不是想办法帮助无家可归的人。
40. 蔡格尼克记忆效应 Zeigarnik Effect
比起已完成的任务，人们更容易记住未完成的任务。
例如：Greg因任务清单上还没完成的一个任务而沮丧。
41. 宜家效应 IKIA Effect
人们更看重自己参与创造的东西。
例如：“你难道不爱这个花了我20美元的茶壶吗？它上面的涂绘可是我自己亲笔画的！”
42. 本·富兰克林效应 Ben Franklin Effect
如果我们已经帮了别人一个忙，那么我们更有可能帮他另一个忙。
例如：Greg给Francis借了一支钢笔，等Francis又向Greg借5元钱时，Greg很爽快的就借了。
43. 旁观者效应 Bystander Effect
周围的人越多，我们帮助受害者的可能性就越小。
例如：当有人在斗殴中受伤时，围观的那群学生里没人去打报警电话。
44. 暗示感受性 Suggestibility
我们，尤其是儿童，有时会将提问者建议的想法误认为是记忆。
例如：“你从沙发上摔下来是在你妈妈打你之前还是之后？”
45. 虚假记忆 False Memory
我们会把想象误以为是真实的记忆。
例如：Greg确定Sally说了一个关于菠萝的笑话，但这个笑话其实是他自己想到的。
46. 潜隐记忆 Cryptomnesia
我们会将真实的记忆误认为是想象。
例如：Greg以为去过墓地是他做的一个梦，实际上他真的去过墓地。
47. 集群错觉 Cluster Illusion
我们在随机数据中发现模式和规律。
例如：“你看那个云彩像不像你家的猫？”
48. 悲观偏见 Pessimism Bias
我们有时会高估坏结果的概率。
例如：水只剩下半杯了，啥都不会变好了。
49. 乐观偏见 Optimism Bias
我们有时对好的结果过于乐观
例如：水还有半杯呢，一切都会好起来的。
50. 盲点偏见 Blind Spot Bias
人们不认为自己有偏见，还会觉得别人比自己更偏激。
例如：“我没有偏见！”
50种认知偏差-英文版 引用原文</content></entry><entry><title>查理芒格: 如何才能度过幸福且有钱的一生</title><url>https://lizj3624.github.io/post/charlie-munger-usc-law-commencement-speech-2007/</url><categories/><tags><tag>芒格</tag><tag>社科</tag></tags><content type="html"> 查理·芒格(Charlie Munger)于2007年5月在南加州法学院毕业典礼上的演讲。 演讲实录-中英文 芒格学院翻译的中文版本
查理·芒格
演讲要点： 1、要得到你想要的某样东西，最可靠的办法是让你自己配得上它。
2、必须拥有跨学科的心态，才能高效而成熟地生活。
3、摆脱自私以及偏见、嫉妒、怨憎和自怜。每当发现自己产生了自怜的情绪，不管是什么原因，哪怕由于自己的孩子患上癌症即将死去,你也要想到，自怜是于事无补的。
4、如果你真的想要在某个领域做得很出色，那么你必须对它有强烈的兴趣，也一定要非常勤奋。
5、要拥有自己真正的能力，而不是鹦鹉学舌的知识。
以下是演讲正文： 你们当中肯定有许多人会觉得奇怪：这么老还能来演讲？嗯，答案很明显：他还没有死。
我已经把今天演讲的几个要点写了下来，下面就来介绍那些对我来说最有用的道理和态度。我并不认为它们对每个人而言都是完美的，但我认为它们之中有许多具有普遍价值，也有许多是「屡试不爽」的道理。
我非常幸运，很小的时候就明白了这样一个道理：要得到你想要的某样东西，最可靠的办法是让你自己配得上它。这是一个十分简单的道理，是黄金法则。
己所不欲，勿施于人 你们要学会己所不欲，勿施于人。总的来说，拥有这种精神的人在生活中能够赢得许多东西，他们赢得的不止是金钱和名誉。还赢得尊敬，理所当然地赢得与他们打交道的人的信任。能够赢得别人的信任是非常快乐的事情。
有的时候你们会发现有些彻头彻尾的恶棍死的时候既富裕又有名，但是周围绝大多数人都认为他们死有余辜。如果教堂里满是参加葬礼的人，其中大多数人去那里是为了庆祝这个小子终于死了。
这让我想起了一个故事：有一个这样的混蛋死掉了，神父说「有人愿意站出来，对死者说点好话吗？」没有人站出来，好长时间没有人站出来，最后有个人站了出来，他说「好吧，他的兄弟更糟糕」。
这不是你们想要得到的下场，以这样的葬礼告终的生活，不是你们想要的生活。
毛姆自传体小说：《人性的枷锁》
仰慕是爱的基础 我很小就明白的第二个道理是，正确的爱应该以仰慕为基础，而且我们应该去爱那些对我们有教育意义的先贤。我懂得这个道理且一辈子都在实践它。萨默赛特·毛姆（ Somerset Maugham ）在他的小说《人性的枷锁》中描绘的爱是一种病态的爱，那是一种病，如果你们发现自己有这种病，应该赶快把它治好。
坚持终身学习 有一个道理非常重要，那就是你们必须坚持终身学习。如果不终身学习，你们将不会取得很高的成就。光靠已有的知识，你们在生活中走不了多远。离开这里以后，你们还得继续学习，这样才能在生活中走得更远。
让伯克希尔·哈撒韦在这一个十年中赚到许多钱的方法，在下一个十年未必还能那么管用，所以沃伦·巴菲特不得不成为一部不断学习的机器。
层次较低的生活也有同样的要求，我不断地看到有些人在生活中越过越好，他们不是最聪明的，甚至不是最勤奋的，但他们是学习机器。他们每天夜里睡觉时，都比那天早晨聪明一点点。孩子们，这种习惯对你们很有帮助，特别是在你们还有很长的路要走的时候。
阿尔弗雷德·诺斯·怀特海曾经说过一句很正确的话，他说只有当人类「发明了发明的方法」之后，人类社会才能快速地发展。他指的是人均 GDP 的巨大增长和其他许多我们今天已经习以为常的好东西。人类社会在几百年前才出现了大发展，在那之前，每个世纪的发展几乎等于零。
人类社会只有发明了发明的方法之后才能发展，同样的道理，你们只有学习了学习的方法之后才能进步。
我非常幸运。在就读哈佛法学院之前就已经学会了学习的方法。在我这漫长的一生中，没有什么比持续学习对我的帮助更大。再拿沃伦·巴菲特来说，如果你们拿着计时器观察他，会发现他醒着的时候有一半时间是在看书，他把剩下的时间大部分用来跟一些非常有才干的人进行一对一的交谈。有时候是打电话，有时候是当面，那些都是他信任且信任他的人。仔细观察的话，沃伦很像个学究，虽然他在世俗生活中非常成功。
学习机器巴菲特
跨学科学习的重要性 另一个对我非常有用的道理是我当年在法学院学到的。那时有位爱开玩笑的教授说：「什么是法律头脑？如果有两件事交织在一起，相互之间有影响，你努力只考虑其中一件，而完全不顾另一件，以为这种思考方式既实用又可行的头脑就是法律头脑。」我知道他是在说反话，他说的那种「法律」方法是很荒唐的。
这给了我很大的启发，因为它促使我去学习各学科中所有的重要道理，这样我就不会成为那位教授所描绘的蠢货。因为真正重要的大道理占每个学科 95% 的份量，所以对我而言，从所有的学科吸取我所需要的 95% 的知识，并将它们变成我思维习惯的一部分，也不是很难的事情。
当然，掌握了这些道理后，你们必须通过实践去使用它们。这就像钢琴演奏家，如果不持续练习，就不可能弹得很好。所以我这辈子不断地实践那种跨学科的方法。
这种习惯帮了我很多忙，它让生活更有乐趣，让我能做更多的事情，让我变得更有建设性，让我变得非常富有，而这无法用天分来解释。我的思维习惯只要得到正确的实践，真的很有帮助。
但这种习惯也会带来危险，因为它太有用了，如果你们使用它，当你们和其他学科的专家（甚至是你们的老板），能够轻而易举地伤害你们。你们会常常发现，原来你们的知识比你老板更丰富，更能够解决他所遇到的问题。当他束手无策的时候，你们有时会知道正确的答案。
隐藏睿智 遇到这样的情况是非常危险的，因为你们的正确让有身份有地位的人觉得没面子，但我还没有找到避免受这个严重问题而伤害的完美方法。
尽管我年轻时扑克牌玩得很好，但在我认为我知道的比上级多的时候，我不太擅长掩饰自己的想法，没有很谨慎地去努力掩饰自己的想法，所以我总是得罪人。
现在人们通常把我当成一个行将就木的没有恶意的古怪老头，但在从前，我有过一段很艰难的日子。我建议你们不要学我，最好学会隐藏你们的睿智。
我有个同事，他从法学院毕业时成绩是全班第一名，曾在美国最高法院工作过，年轻时当过律师，当时他总是表现出见多识广的样子。有一天，他上级的高级合伙人把他叫进办公室，对他说：「听好了，查克，我要向你解释一些事情，你的工作和职责是让客户认为他是房间里最聪明的人。如果你完成了这项任务之后还有多余的精力，应该用它来让你的高级合伙人显得像是房间里第二聪明的人。只有履行了这两条义务之后，你才可以表现你自己。」
伏尔泰：如果有权有势的人错了，
而你是对的，那你就危险了
人们必须拥有跨学科的心态，才能高效而成熟地生活。在这里，我想引用古代最伟大的律师马尔库斯·图鲁斯·西塞罗的一个重要思想。西塞罗有句话很著名，他说，如果一个人不知道他出生之前发生过什么事情，在生活中就会像一个无知的孩童。
这个道理非常正确，西塞罗正确地嘲笑了那些愚蠢得对历史一无所知的人。但如果你们将西塞罗这句话推而广之，我认为你们应该这么做：除了历史之外，还有许多东西是人们必须了解的。
所谓的许多东西就是所有学科的重要思想。但如果你对一种知识死记硬背，以便能在考试中取得好成绩，这种知识对你们不会有太大的帮助。你们必须掌握许多知识，让它们在你们的头脑中形成一个思维框架，在随后的日子里能自动地运用它们。
如果你们能够做到这一点，我郑重地向你们保证，总有一天你们会在不知不觉中意识到：「我已经成为我的同龄人中最有效率的人之一」。与之相反，如果不努力去实践这种跨学科的方法，你们中的许多最聪明的人只会取得中等成就，甚至生活在阴影中。
《西塞罗发现阿基米德之墓》
历史是时代的见证、真理的火炬
记忆的生命、生活的老师和古人的使者
逆向思维 我发现的另外一个道理蕴含在麦卡弗雷院长刚才讲过的故事中，故事里的乡下人说：「要知道我会死在哪里就好啦，我将永远不去那个地方。」这乡下人说的话虽然听起来很荒唐，却蕴含着一个深刻的道理。对于复杂的适应系统以及人类的大脑而言，如果采用逆向思考，问题往往会变得更容易解决。如果你们把问题反过来思考，通常就能够想得更加清楚。
例如，如果你们想要帮助印度，应该考虑的问题不是「我要怎样才能帮助印度？」与之相反，你们应该问：「我要怎样才能损害印度？」你们应该找到能对印度造成最大损害的事情，然后避免去做它。
也许从逻辑上来看两种方法是一样的，但那些精通代数的人知道，如果问题很难解决，利用反向证明往往就能迎刃而解。生活的情况跟代数一样，逆向思考能够帮助你们解决正面思考无法处理的问题。
让我现在就来使用一点逆向思考。什么会让我们在生活中失败呢？我们应该避免什么呢？有些答案很简单，例如，懒惰和言而无信会让我们在生活中失败。如果你们言而无信，就算有再多的优点，也无法避免悲惨的下场。所以你们应该养成言出必行的习惯，懒惰和言而无信是显然要避免的。
代数之父花拉子米
数学思维让很多问题不再是问题
避免极端意识形态 要避免极端的意识形态，因为它会让人们丧失理智。年轻人特别容易陷入强烈而愚蠢的意识形态中，而且永远走不出来。当你们宣布自己是某个类似邪教团体的忠实成员，并开始倡导该团体的意识形态时，这样你们的头脑就会坏掉，而且有时候是以惊人的速度坏掉。
我有一条「铁律」，它帮助我在偏向于支持某种强烈的意识形态时保持清醒。我觉得我没资格拥有一种观点，除非我能比我的对手更好地反驳我的立场。我认为我只有在达到这个境界时才有资格发表意见。
我的做法对大多数人而言，可能太难了，但希望对我来说它永远不会变得太难。这种别陷入极端意识形态的方法，在生活中是非常非常重要的，如果你们想要成为明智的人，严重的意识形态很有可能会导致事与愿违。
前苏联宣传画 | 警惕自我思想被人操纵
消除"自我服务偏好"和自怜 有一种叫做「自我服务偏好」的心理因素也经常导致人们做傻事，它往往是潜意识的，所有人都难免受其影响。你们认为「自我」有资格去做它想做的事情，例如，透支收入来满足它的需求，那有什么不好呢？
从前有一个人，他是全世界最著名的作曲家，可是他大部分时间过得非常悲惨，原因之一就是他总是透支他的收入。那位作曲家叫做莫扎特。连莫扎特都无法摆脱这种愚蠢行为的毒害，我觉得你们更不应该去尝试它。
总的来说，嫉妒、怨憎、仇恨和自怜都是灾难性的思想状态。过度自怜可以让人近乎偏执，偏执是最难逆转的东西之一，你们不要陷入自怜的情绪中。
我有个朋友，他随身携带一叠厚厚的卡片，每当有人说了自怜的话，他就会慢慢地、夸张地掏出那一叠卡片，将最上面那张交给说话的人。卡片上写着「你的故事让我很感动，我从来没有听过有人像你这么倒霉。」
每当你们发现自己产生了自怜的情绪，不管是什么原因，哪怕由于自己的孩子患上癌症即将死去。你们也要想到，自怜是于事无补的。这样的时候，你们要送给自己一张我朋友的卡片。自怜总是会产生负面影响，它是一种错误的思维方式。如果你们能够避开它，你们的优势就远远大于其他人。
你们当然也要在自己的思维习惯中消除自我服务的偏好，别以为对你们有利的就是对整个社会有利的，也别根据这种自我中心的潜意识倾向来为你们愚蠢或邪恶的行为辩解，那是一种可怕的思考方式。你们要让自己摆脱这种心理，因为你们想成为智者而不是傻瓜，想做好人而不是坏蛋。
你们必须在自己的认知行动中，允许别人拥有自我服务的偏好。因为大多数人无法非常成功地清除这种心理，人性就是这样。如果你们不能容忍别人在行动中表现出自我服务的偏好，那么你们又是傻瓜。
正确的说服技巧是本杰明·富兰克林指出的那种，他说：「如果你想要说服别人，要诉诸利益，而非诉诸理性。」你们应该多多诉诸利益，而不是理性，即使是当你们的动机很高尚的时候。
富兰克林：如果你想要说服别人
要诉诸利益，而非诉诸理性
远离变态的激励机制 应该避免的事是受到变态的激励机制的驱动。你们不要处在一个你们表现得越愚蠢或者越糟糕，它就提供越多回报的变态激励系统之中，变态的激励机制具有控制人类行为的强大力量，人们应该避免受它影响。
变态的工作关系也是应该避免的，你们要特别避免在你们不崇敬或者不想像他一样的人手下干活，那是很危险的。所有人在某种程度上都受到权威人物的控制，尤其是那些为我们提供回报的权威人物。
要正确地应对这种危险，必须同时拥有才华和决心。在我年轻的时候，我的办法是找出我尊敬的人，然后想办法调到他手下去。总之，在你们正确地仰慕的人手下工作，在生活中取得的成就将会更加令人满意。
养成保持公正的习惯 养成一些让你能保持客观公正的习惯。我们都记得达尔文特别留意相反的证据，尤其是他证伪的是某种他信奉和热爱的理论时。如果你们想要在思考的时候尽量少犯错误，就需要这样的习惯。
人们还需要养成核对检查清单的习惯，核对检查清单能避免很多错误，不仅仅对飞行员来说是如此。你们不应该光是掌握广泛的基础知识，而是应该把它们在头脑中列成一张清单，然后再加以使用。没有其他方法能取得相同的效果。
达尔文 | 关注正确，更关注证伪
不平等最大化的奇效 另外一个我认为很重要的道理就是，将不平等最大化通常能够收到奇效。这句话是什么意思呢？约翰·伍登（ John Wooden ）提供了一个示范性的例子。伍登曾经是世界上最优秀的篮球教练。他对五个水平较低的球员说：「你们不会得到上场的时间，你们是陪练。」
比赛几乎都是那七个水平较高的球员在打的。这七个水平高的球员学到了更多，别忘了学习机器的重要性 —— 因为他们独享了所有的比赛时间。在他采用非平等主义的方法时，伍登比从前赢得了更多的比赛。
我认为生活就像比赛也充满了竞争，我们要让那些最有能力和最愿意成为学习机器的人发挥最大的作用。如果你们想要获得非常高的成就，你们就必须成为那样的人。你们不希望在 50 个轮流做手术的医生中，抓阄抽一个来给你们的孩子做脑外科手术。
约翰·伍登 | 掌声属于获胜的那方
避免鹦鹉学舌的技巧 我经常讲一个有关马克斯·普朗克的笑话。
普朗克获得诺贝尔奖之后，到德国各地作演讲，每次讲的内容大同小异，都是关于新的量子物理理论的，时间一久，他的司机记住了讲座的内容。司机说：「普朗克教授，我们老这样也挺无聊的，不如这样吧，到慕尼黑让我来讲，你戴着我的司机帽子坐在前排，你说呢？」
普朗克说：「好啊。」于是司机走上讲台，就量子物理发表了一通长篇大论。后来有个物理学教授站起来，提了一个非常难的问题。演讲的司机说：「哇，我真没想到，我会在慕尼黑这么先进的城市，遇到这么简单的问题。我想请我的司机来回答。」
讲这个故事，并不是为了表扬主角很机敏。我认为这个世界的知识可以分为两种：一种是普朗克知识，它属于那种真正懂的人。他们付出了努力，他们拥有那种能力。另外一种是司机知识。他们掌握了鹦鹉学舌的技巧；他们可能有漂亮的头发；他们的声音通常很动听；他们给人留下深刻的印象。
但其实他们拥有的是伪装成真实知识的司机知识。如果你们在生活中想努力成为拥有普朗克知识的人，而避免成为拥有司机知识的人，你们将遇到这个问题。到时会有许多巨大的势力与你们作对。
普朗克 | 鹦鹉学舌是技巧，而不是知识
培养兴趣，保持勤奋 如果你们真的想要在某个领域做得很出色，那么你们必须对它有强烈的兴趣。我可以强迫自己把许多事情做得相当好，但我无法将我没有强烈兴趣的事情做得非常出色。从某种程度上来讲，你们也跟我差不多。所以如果有机会的话，你们要想办法去做那些你们有强烈兴趣的事情。
还有就是，你们一定要非常勤奋才行。我非常喜欢勤奋的人。我这辈子遇到的合伙人都极其勤奋。我想我之所以能够和他们合伙，部分原因在于我努力做到配得起他们，部分原因在于我很精明地选择了他们，还有部分原因是我运气好。
我早期的生意上曾经有过两位合伙人，他们俩在大萧条期间合资成立了一家建筑设计施工公司，达成了很简单的协议：「如果我们没有完成对客户的承诺，我们俩要每天工作 14 个小时，每星期工作 7 天，直到完成为止。」不用说你们也知道啦，这家公司做得很成功。我那两位合伙人广受尊敬。他们这种简单的老派观念几乎肯定能够提供一个很好的结果。
正视生活中的不幸 你们在生活中可能会遭到沉重的打击，不公平的打击。有些人能挺过去，有些人不能。我认为爱比克泰德（ Epictetus ）的态度能够引导人们作出正确的反应。他认为生活中的每一次不幸，无论多么倒霉，都是一个锻炼的机会。他认为每一次不幸都是吸取教训的良机。
人们不应该在自怜中沉沦，而是应该利用每次打击来提高自我。他的观点是非常正确的，影响了最优秀的罗马帝国皇帝马库斯·奥勒留（ Marcus Aurelius ），以及随后许多个世纪里许许多多其他的人。
你们很可能会说：「谁会在生活中整天期待麻烦的到来啊？」其实我就是这样的。在这漫长的一生中，我一直都在期待麻烦的到来。现在我已经 84 岁啦。就像爱比克泰德，我也拥有一种蒙受恩宠的生活。我总是期待麻烦的到来，准备好麻烦来临时如何对付它，这并没有让我感到不快乐。这根本对我没有任何害处，实际上，这对我有很大的帮助。
爱比克泰德 | 自怜无用
避免官僚主义，保持信任 由于在你们将要从事的行业中有大量的程序和繁文缛节，最后一个我想要告诉你们的道理是，复杂的官僚程序不是文明社会的最好制度。最好的制度是一张无缝的、非官僚的信任之网。没有太多稀奇古怪的程序。
只有一群可靠的人，他们彼此之间有正确的信任。那是玛约医疗中心手术室的运作方式。如果那里的医生像律师那样，设立许多像法律程序那么繁琐的规矩，更多的病人会死于非命。
所以当你们成为律师的时候，永远别忘记，虽然你们在工作中要遵守程序，但你不用总是被程序牵着鼻子走。你们在生活中应该追求的是尽可能地培养一张无缝的信任之网。如果你们拟定的婚姻协议书长达 47 页，那么我建议你们这婚还是不结为妙。
好啦，在毕业典礼上讲这么多已经够啦。我希望这些老人的废话对你们来说是有用的。最后，我想用约翰·班扬的巨作《天路历程》中那位真理剑客年老之后唯一可能说出的话来结束这次演讲：「我的剑传给能挥舞它的人」。</content></entry><entry><title>美股动态及各国宏观数据</title><url>https://lizj3624.github.io/post/stock-index/</url><categories/><tags><tag>美股</tag><tag>数据</tag></tags><content type="html"> 实时查看美股动态数据，实时查看各国宏观数据
新浪美股实时行情 新浪美股实时行情
新浪美股实时行情-纳斯达克交易所
历年美股市值总量
全球股指、期货、大宗商品 全球股指期货动态一览
英文财经全球金融市场动态
全球宏观 财经M平方-全球宏观</content></entry><entry><title>Cloudflare 公布 2021 年第四季度和财年财务业绩</title><url>https://lizj3624.github.io/post/cloudflare-2021-q4/</url><categories/><tags><tag>cloudflare</tag><tag>财报</tag></tags><content type="html"> 2022年2月10号盘后，Cloudflare发布了Q4财报和全年财报，信息如下
Cloudflare 2021年Q4财报亮点 第四季度收入总计 1.936 亿美元，同比增长 54%；2021财年收入总计6.564亿美元，同比增长52% 在大型企业客户持续增长的推动下，创纪录的美元净留存率为 125%，同比增长 600 个基点 第四季度实现创纪录的经营现金流和正的自由现金流；经营现金流为 4060 万美元，占总收入的 21%，自由现金流为 860 万美元，占总收入的 4% 2021财年第四季度财务摘要 收入：总收入为 1.936 亿美元，同比增长 54%。 毛利润：GAAP 毛利润为 1.511 亿美元或 78.0% 毛利率，而 2020 年第四季度为 9690 万美元或 76.9%。非 GAAP 毛利润为 1.533 亿美元或 79.2% 毛利率，而 9830 万美元，或78.1%，在 2020 年第四季度。 营业收入（亏损）：2020 年第四季度，GAAP 运营亏损为 4110 万美元，占总收入的 21.2%，而 2470 万美元，占总收入的 19.6%。非 GAAP 运营收入为 220 万美元，或占总收入的 1.2%，而 2020 年第四季度的运营亏损为 550 万美元，占总收入的 4.3%。 净收入（亏损）：GAAP 净亏损为 7750 万美元，而 2020 年第四季度为 3400 万美元。GAAP 每股基本和稀释后净亏损为 0.24 美元，而 2020 年第四季度为 0.11 美元。非 GAAP 净收入为10 万美元，而 2020 年第四季度非 GAAP 净亏损为 740 万美元。非 GAAP 每股摊薄净收益为 0.00 美元，而 2020 年第四季度非 GAAP 每股净亏损为 0.02 美元。 现金流：经营活动产生的净现金流为 4060 万美元，而 2020 年第四季度为负 880 万美元。自由现金流为 860 万美元，占总收入的 4%，而负2350 万美元，占总收入的 19%收入，在 2020 年第四季度。 截至 2021 年 12 月 31 日，现金、现金等价物和可供出售证券为 18.218 亿美元。 2021 年全年财务摘要 收入：总收入为 6.564 亿美元，同比增长 52%。 毛利润：美国通用会计准则毛利润为 5.093 亿美元或 77.6% 毛利率，而 2020 财年为 3.30 亿美元或 76.6%。非美国通用会计准则毛利润为 5.159 亿美元，或 78.6% 毛利率，而 3.346 亿美元或 77.6% %，在 2020 财年。 运营亏损： 2020 财年，GAAP 运营亏损为 1.277 亿美元，占总收入的 19.5%，而 2020 财年为 1.068 亿美元，占总收入的 24.8%。非 GAAP 运营亏损为 700 万美元，占总收入的 1.1%，相比之下，2020 财年为 3390 万美元，占总收入的 7.9%。 净亏损：GAAP 净亏损为 2.603 亿美元，而 2020 财年为 1.194 亿美元。GAAP 每股净亏损为 0.83 美元，而 2020 财年为 0.40 美元。非 GAAP 净亏损为 1510 万美元，而 2020 财年为 3510 万美元。 GAAP 每股净亏损为 0.05 美元，而 2020 财年为 0.12 美元。 现金流：经营活动产生的净现金流为 6460 万美元，而 2020 财年为负 1710 万美元。自由现金流为负 4310 万美元，占总收入的 7%，而负9210 万美元，占总收入的 21%， 2020财年。 财务展望 由于持续的 COVID-19 大流行，以下有关我们财务前景的前瞻性陈述受到很大的不确定性，反映了我们截至 2022 年 2 月 10 日关于大流行对我们运营的影响的估计，并且高度依赖于我们可能无法预测或控制的许多因素，其中包括：大流行的持续时间、传播范围和严重程度；政府和企业为应对这一流行病而采取的行动及其对我们的客户、供应商和合作伙伴的影响；在全球范围内接种 COVID-19 疫苗的时机以及这些疫苗的长期疗效；大流行对全球和区域经济以及总体经济活动的影响；我们在受影响地区继续运营的能力；
对于 2022 财年第一季度，我们预计： 总收入为 2.05 至 2.06 亿美元 Non-GAAP 运营收入为 0.5 至 150 万美元 Non-GAAP 每股净收益为 0.00 美元至 0.01 美元，使用约 3.48 亿股的加权平均已发行普通股 对于 2022 财年全年，我们预计： 总收入为 9.27 至 9.31 亿美元 Non-GAAP 运营收入为 10.0 至 1400 万美元 Non-GAAP 每股净收益为 0.03 至 0.04 美元，使用约 3.52 亿股的加权平均已发行普通股</content></entry><entry><title>中文浏览国外社交媒体热点(Buzzing.cc)</title><url>https://lizj3624.github.io/post/buzzing/</url><categories/><tags><tag>buzz</tag><tag>国外论坛</tag></tags><content type="html"> 英文不太好，一直想找翻译国外媒体热点的网站，今天终于找到了buzzing.cc
中文浏览国外社交媒体热点 Buzzing 适合：
想要了解世界（主要是英文世界）正在发生什么的人 有一定的英语基础，但是无法流畅阅读 想要提升英文阅读量，但是找不到感兴趣的读物 注重阅读体验，喜欢简约的排版</content></entry><entry><title>金融炼金术(The Alchemy of Finance)</title><url>https://lizj3624.github.io/post/the-alchemy-of-finance/</url><categories/><tags><tag>金融</tag><tag>读书</tag></tags><content type="html"> 最近在看索罗斯的《金融炼金术》再次做一下读书笔记以及自己的体悟
反身性理论(theory of reflexivity)的概念
反身性的概念其实很简单：在任何包含有思维参与者的情景中，参与者的思想和现实情况之间存在着一种相互影响的关系。 一方面思考者试图去了解真实的情况，另一方面他们试图获得一个他们想象中的结果。这两种过程起到的作用相反：在求 知的过程中现实是已知量，然而在参与的过程中，参与者的思想成为了已知量。在提出哪些是已知的而哪些是未知的时候，这 两种作用会相互干涉。我将这种两个作用间的相互干涉称之为"反身性"。反身性导致参与者对于现实的理解是不完美的，同时 参与者的行为也会产生他们无法预知的后果。
那种觉得市场永远能够做出正确决定的幻觉是建立在参与过程和认知过程间的反身性互动上的。事实上，市场总是错误的， 他的趋势体现在膨胀期的自我满足以及衰退期的自我瓦解。因此只有处在转折点时流行倾向才会被证明是错的。
人类不确定性原则
人类不确定性原则认为人们对于他们生活的世界的认知是不可能同时满足真实性、完整性和连贯性的。在人们的思维受到 现实限制的情况下，思维是不足以做出完美的决策的；而当思维干预了决策的情况下，思维就无法控制现实的走向。
人类不确定性原则与海森堡测不准原理有很多相似之处，海森堡测不准原理认为量子粒子的位置和动量不可能同时被测出。
索罗斯将他提出的人类不确定性原则跟量子力学的海森堡测不准原理对比，看来索罗斯对量子力学了解不少，难道他的量子 基金名称也是由此来的，哈哈。
历史的鞋带理论
我们更多地关注结果与预期之间的差别。结果会受到预期的影响，但是不会被预期所决定。它们之间存在一个双向的反馈循环： 认知过程是从结果到预期，而参与过程是从预期到结果。两个过程持续地向不同方向起作用。因果关系的方向并不是从一个结果 传到下一个，它交叉往复与结果和预期之间，反之亦然。我称之为"历史的鞋带理论"</content></entry><entry><title>美国上市公司总市值已近50万亿美金</title><url>https://lizj3624.github.io/post/us-stock-cap/</url><categories/><tags><tag>宏观</tag><tag>美股</tag></tags><content type="html"> 根据Siblis Research 的数据显示：
1、2021年9月，在纽交所、纳斯达克、美国柜台交易市场上市的美国公司总市值为48.6万亿美金，美国前500上市公司市值为38.4万亿美金，美国2020年GDP才21万亿美金。
2、美国公司在2000年初经历了互联网泡沫，市值连跌几年；2008年又经历次贷危机，市值大幅下降；随后十几年，美国公司市值基本都是年年增长。
3、虽然去年美国股市在疫情期间经历暴跌，多次熔断，但随后几个月信心很快恢复，2020年美国公司总市值还同比增加20.1%。随后美国股市屡创新高，截止今年9月份，美国公司市值已经同比上涨19.2%。
4、虽然美国公司市值不断上涨，但在美国上市的中概股却是惨不忍睹，阿里巴巴因为反垄断和蚂蚁金服事件市值已经下跌一半，教育行业由于双减政策都经历暴跌，市值十不存一，其它中概股也都有大幅度下跌。
5、美国最近十几年从移动互联网中获利最多，苹果、亚马逊、谷歌、facebook、微软不断发展，覆盖用户越来越广，对全球的影响不断加强，从全世界各地赚了太多的钱。
6、美国五大科技巨头当前市值近10万亿美金，占美国公司总市值超20%，从次贷危机以来，这五家科技巨头市值已上涨几十倍甚至上百倍，带动美国公司市值增长。
引用原文</content></entry><entry><title>Markdown语法手册</title><url>https://lizj3624.github.io/post/markdown-syntax/</url><categories><category>themes</category><category>syntax</category></categories><tags><tag>markdown</tag><tag>css</tag><tag>html</tag></tags><content type="html"> 本文提供了一个可以在 Hugo 内容文件中使用的基本Markdown语法示例，还展示了基本 HTML 元素在 Hugo 主题中是否使用 CSS 装饰。
标题 下面的 HTML 代码&lt;h1>—&lt;h6> 元素表示六个级别的节标题。 &lt;h1>是最高的节级别，&lt;h6>是最低的节级别。
H1 H2 H3 H4 H5 H6 段落 Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.
伊塔图？厨房里有很多东西，我不知道他们喜欢吃什么，或者他们喜欢吃什么。
引用 blockquote元素表示从另一个来源引用的内容，可选的引用必须在footer或cite元素内，也可选的内嵌更改，如注释和缩写。
引用没有归属 Tiam, ad mint andaepu dandae nostion secatur sequo quae. 注意 可以在块引用中使用 Markdown 语法。
带归属的引用 不要通过分享记忆来交流，通过交流来分享记忆。
— 罗布·派克1
表格 表不是Markdown核心规范的一部分，但是Hugo支持开箱即用。
Name Age Bob 27 Alice 23 表格内使用Markdown语法 Italics Bold Code italics bold code 图像 ![图像描述](图像地址) 示例 Google Chrome Firefox Browser
点击图像可以打开图像浏览器，快试试吧。
代码块 带有引号的代码块 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 用四个空格缩进的代码块 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 代码块引用Hugo的内部高亮短代码 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 列表类型 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr, sub, sup, kbd, mark GIF 是位图图像格式。
H2O
Xn + Yn = Zn
按 CTRL+ALT+Delete 组合键结束会话。
大多数蝾螈在夜间活动，捕食昆虫、蠕虫和其他小动物。
以上引文摘自Rob Pike在2015年11月18日Gopherfest上的演讲。&#160;&#8617;&#xfe0e;</content></entry><entry><title>富文本内容测试</title><url>https://lizj3624.github.io/post/rich-content/</url><categories/><tags><tag>shortcodes</tag><tag>privacy</tag></tags><content type="html"> Hugo上有几个内置短代码，用于丰富内容，以及隐私配置还有一组简单的短代码，支持各种社交媒体嵌入的静态和非JS版本。
YouTube Privacy Enhanced Shortcode Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; } “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”
— Jan Tschichold pic.twitter.com/gcv7SrhvJb
&mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }</content></entry><entry><title>占位符文本显示</title><url>https://lizj3624.github.io/post/placeholder-text/</url><categories/><tags><tag>markdown</tag><tag>text</tag></tags><content type="html"> 你对我的心有偏见。我向您保证，我们的生活将不会受到影响，我们的生活将会受到影响。你说你现在住在医院里，因为你的眼睛是透明的，你的眼睛是光明的，你的眼睛是光明的!
Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.
Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt
The Van de Graaf Canon
Mane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.
Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.
Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.</content></entry><entry><title>数据公式设置显示</title><url>https://lizj3624.github.io/post/math-typesetting/</url><categories/><tags/><content type="html"> Hugo项目中的数学表示法可以通过使用第三方JavaScript库来实现。
在这个例子中，我们将使用 MathJax
Create a post under /content/en[zh-CN]/math.md
可以全局启用MathJax，请在项目配置中将参数math设置为true
或是在每页基础上启用MathJax，在内容文件中包括参数math: true
注意： 使用支持的TeX功能的联机参考资料
例子 重复的分数 $$ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } } $$
总和记号 $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$
几何级数之和 我把接下来的两个例子分成了几行，这样它在手机上表现得更好。这就是为什么它们包含 \displaystyle。
$$ \displaystyle\sum_{i=1}^{k+1}i $$
$$ \displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1) $$
$$ \displaystyle= \frac{k(k+1)}{2}+k+1 $$
$$ \displaystyle= \frac{k(k+1)+2(k+1)}{2} $$
$$ \displaystyle= \frac{(k+1)(k+2)}{2} $$
$$ \displaystyle= \frac{(k+1)((k+1)+1)}{2} $$
乘记号 $$ \displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &lt; 1. $$
随文数式 这是一些线性数学: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ ， 然后是更多的文本。
希腊字母 $$ \Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega \alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi $$
箭头 $$ \gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow $$
$$ \Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow \leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow $$
$$ \Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup $$
$$ \rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow $$
符号 $$ \surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup $$
$$ \bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle $$
微积分学 $$ \int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx $$
$$ f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x} $$
$$ \oint \vec{F} \cdot d\vec{s}=0 $$
洛伦茨方程 $$ \begin{aligned} \dot{x} &amp; = \sigma(y-x) \ \dot{y} &amp; = \rho x - y - xz \ \dot{z} &amp; = -\beta z + xy \end{aligned} $$
交叉乘积 这在KaTeX中是可行的，但在这种环境中馏分的分离不是很好。
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
这里有一个解决方案:使用“mfrac”类(在MathJax情况下没有区别)的额外类使分数更小:
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
强调 $$ \hat{x}\ \vec{x}\ \ddot{x} $$
有弹性的括号 $$ \left(\frac{x^2}{y^3}\right) $$
评估范围 $$ \left.\frac{x^3}{3}\right|_0^1 $$
诊断标准 $$ f(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even} \ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases} $$
麦克斯韦方程组 $$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
这些方程式很狭窄。我们可以使用(例如)添加垂直间距 [1em] 在每个换行符(\)之后。正如你在这里看到的：
$$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
统计学 固定词组：
$$ \frac{n!}{k!(n-k)!} = {^n}C_k {n \choose k} $$
分数在分数 $$ \frac{\frac{1}{x}+\frac{1}{y}}{y-z} $$
ｎ次方根 $$ \sqrt[n]{1+x+x^2+x^3+\ldots} $$
矩阵 $$ \begin{pmatrix} a_{11} &amp; a_{12} &amp; a_{13}\ a_{21} &amp; a_{22} &amp; a_{23}\ a_{31} &amp; a_{32} &amp; a_{33} \end{pmatrix} \begin{bmatrix} 0 &amp; \cdots &amp; 0 \ \vdots &amp; \ddots &amp; \vdots \ 0 &amp; \cdots &amp; 0 \end{bmatrix} $$
标点符号 $$ f(x) = \sqrt{1+x} \quad (x \ge -1) f(x) \sim x^2 \quad (x\to\infty) $$
现在用标点符号:
$$ f(x) = \sqrt{1+x}, \quad x \ge -1 f(x) \sim x^2, \quad x\to\infty $$</content></entry><entry><title>支持Emoji表情符号</title><url>https://lizj3624.github.io/post/emoji-support/</url><categories/><tags><tag>emoji</tag></tags><content type="html"> 在Hugo项目中可以通过多种方式启用Emoji。
The emojify function can be called directly in templates or Inline Shortcodes.
To enable emoji globally, set enableEmoji to true in your site&rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.
馃檲 🙈 馃檳 🙉 馃檴 🙊
The Emoji cheat sheet is a useful reference for emoji shorthand codes.
N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.
.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }</content></entry><entry><title>关于我</title><url>https://lizj3624.github.io/about.html</url><categories/><tags/><content type="html"> Hugo是用Go编写的一个开放源代码静态站点生成器，可在Apache许可证2.0下使用。 Hugo支持TOML, YAML和JSON数据文件类型，Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类法、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小和对Sass SCSS工作流的支持。
Hugo使用了多种开源项目，包括:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo是博客、企业网站、创意作品集、在线杂志、单页应用程序甚至是数千页的网站的理想选择。
Hugo适合那些想要手工编写自己的网站代码，而不用担心设置复杂的运行时、依赖关系和数据库的人。
使用Hugo建立的网站非常快速、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。
更多信息请访问GitHub.</content></entry></search>